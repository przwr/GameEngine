/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package navmeshpathfinding;

import static engine.Methods.roundDouble;
import engine.Point;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.List;

/**
 *
 * @author WROBELP1
 */
public class LineWindow extends javax.swing.JFrame {

	/**
	 * Creates new form Window
	 */
	public LineWindow() {
		initComponents();
	}

	public void addVariables(List<Line> lines) {
		this.lines = lines;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		canvas = new MyCanvas();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setPreferredSize(new java.awt.Dimension(1056, 724));

		canvas.setBackground(new java.awt.Color(153, 153, 255));
		canvas.setPreferredSize(new java.awt.Dimension(1024, 724));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 791, Short.MAX_VALUE)
				.addGroup(
						layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup()
										.addContainerGap()
										.addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addContainerGap())));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 579, Short.MAX_VALUE)
				.addGroup(
						layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup()
										.addContainerGap()
										.addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addContainerGap())));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(LineWindow.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>
		// </editor-fold>

		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new LineWindow().setVisible(true);
			}
		});
	}

	List<Line> lines;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private java.awt.Canvas canvas;

	// End of variables declaration//GEN-END:variables
	class MyCanvas extends java.awt.Canvas {

		MyCanvas() {
			super();
		}

		@Override
		public void paint(Graphics g) {
			Graphics2D g2;
			g2 = (Graphics2D) g;
			float SCALE = 0.5f;
			Point point1, point2;
			g2.setColor(Color.BLACK);
			for (Line line : lines) {
				point1 = line.getStart();
				point2 = line.getEnd();
				g2.drawLine(roundDouble(point1.getX() * SCALE), roundDouble(point1.getY() * SCALE),
						roundDouble(point2.getX() * SCALE), roundDouble(point2.getY() * SCALE));
			}
		}
	}
}
