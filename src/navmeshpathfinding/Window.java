/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package navmeshpathfinding;

import collision.Figure;
import static engine.Methods.roundDouble;
import engine.Point;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import javax.swing.JPanel;

/**
 *
 * @author WROBELP1
 */
public class Window extends javax.swing.JFrame {

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
    }

    public void addVariables(NavigationMesh mesh, Point end, Point start, Point[] path, int x, int y) {
        this.mesh = mesh;
        this.end = new Point(end.getX() - x, end.getY() - y);
        this.start = new Point(start.getX() - x, start.getY() - y);
        if (path != null) {
            Point[] npath = new Point[path.length];
            for (int i = 0; i < path.length; i++) {
                npath[i] = new Point(path[i].getX() - x, path[i].getY() - y);
            }
            this.destination = npath;
        }
    }

    public void setCorrection(Point correct, int x, int y, Figure inAWay) {
        if (correct == null || inAWay == null) {
            correction = colS = colE = null;
            return;
        }
        correction = new Point(correct.getX() - x, correct.getY() - y);
        colS = new Point(inAWay.getX() - x, inAWay.getY() - y);
        colE = new Point(inAWay.getXEnd() - x, inAWay.getYEnd() - y);
    }

    public void setPositions(Point prey, Point mob, int x, int y) {
        this.prey = new Point(prey.getX() - x, prey.getY() - y);
        this.mob = new Point(mob.getX() - x, mob.getY() - y);
    }
    
    public void setEnd(Point end, int x, int y){
         this.end = new Point(end.getX() - x, end.getY() - y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new GPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFocusTraversalPolicyProvider(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1044, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 660, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
		//</editor-fold>

		//</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    NavigationMesh mesh;
    Point end, start, correction, mob, prey, colS, colE;
    Point[] destination;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
       class GPanel extends JPanel {

        public GPanel() {
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2;
            g2 = (Graphics2D) g;
            double SCALE = 0.5;
            Polygon poly = new Polygon();
            for (Triangle triangle : mesh.getTriangles()) {
                for (int j = 0; j < 3; j++) {
                    Node nd = triangle.getNode(j);
                    poly.addPoint(roundDouble(nd.getX() * SCALE), roundDouble(nd.getY() * SCALE));
                }
                g2.setColor(Color.lightGray);
                g2.fill(poly);
                g2.setColor(Color.gray);
                g2.draw(poly);
                poly.reset();
            }
            g2.setColor(Color.BLACK);
            for (Bound line : mesh.bounds) {
                g2.drawLine(roundDouble(line.getStart().getX() * SCALE), roundDouble(line.getStart().getY() * SCALE), roundDouble(line.getEnd().getX() * SCALE), roundDouble(line.getEnd().getY() * SCALE));
            }
            g2.setColor(Color.yellow);
            if (destination != null) {
                for (int i = 0; i < destination.length - 1; i++) {
                    g2.drawLine(roundDouble(destination[i].getX() * SCALE), roundDouble(destination[i].getY() * SCALE), roundDouble(destination[i + 1].getX() * SCALE), roundDouble(destination[i + 1].getY() * SCALE));
                }
            }

            if (colS != null && colE != null) {
                g2.setColor(Color.BLUE);
                g2.drawLine(roundDouble(colS.getX() * SCALE), roundDouble(colS.getY() * SCALE), roundDouble(colS.getX() * SCALE), roundDouble(colE.getY() * SCALE));
                g2.drawLine(roundDouble(colE.getX() * SCALE), roundDouble(colE.getY() * SCALE), roundDouble(colS.getX() * SCALE), roundDouble(colE.getY() * SCALE));
                g2.drawLine(roundDouble(colE.getX() * SCALE), roundDouble(colE.getY() * SCALE), roundDouble(colE.getX() * SCALE), roundDouble(colS.getY() * SCALE));
                g2.drawLine(roundDouble(colS.getX() * SCALE), roundDouble(colS.getY() * SCALE), roundDouble(colE.getX() * SCALE), roundDouble(colS.getY() * SCALE));
            }

            if (end != null) {
                g2.setColor(Color.green);
                g2.fillOval(roundDouble(end.getX() * SCALE - 3), roundDouble(end.getY() * SCALE - 3), 6, 6);
            }
            if (start != null) {
                g2.setColor(Color.red);
                g2.fillOval(roundDouble(start.getX() * SCALE - 3), roundDouble(start.getY() * SCALE - 3), 6, 6);
            }
            if (correction != null) {
                g2.setColor(Color.BLUE);
                g2.fillOval(roundDouble(correction.getX() * SCALE - 3), roundDouble(correction.getY() * SCALE - 3), 6, 6);
            }

            if (prey != null) {
                g2.setColor(Color.cyan);
                g2.fillOval(roundDouble(prey.getX() * SCALE - 3), roundDouble(prey.getY() * SCALE - 3), 6, 6);
            }

            if (mob != null) {
                g2.setColor(Color.ORANGE);
                g2.fillOval(roundDouble(mob.getX() * SCALE - 3), roundDouble(mob.getY() * SCALE - 3), 6, 6);
            }

            repaint();
        }
    }
}
